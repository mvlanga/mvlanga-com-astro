---
import { getCollection } from "astro:content";
import { BlogFilter } from "@/components/blog/BlogFilter";
import { BlogPosts } from "@/components/blog/BlogPosts";
import {
	getTagsWithCountByPosts,
	groupPostsByMonth,
} from "@/components/blog/utils";
import Skeleton from "@/components/common/Skeleton.astro";
import Layout from "@/layouts/layout.astro";
import { sortBlogPosts } from "@/utils/sortCollection";

const isProduction = import.meta.env.PROD;

const blogPosts = sortBlogPosts(
	await getCollection("blogPosts", ({ data }) => {
		return isProduction
			? data.draft === undefined || data.draft === false
			: true;
	}),
);

const postsGroupedByMonth = groupPostsByMonth(blogPosts);

const availableTags = getTagsWithCountByPosts(blogPosts);
---

<title slot="head">Blog â€” Moriz von Langa</title>
<meta slot="head" name="description"
      content="A few notes and reminders for myself, usually when I've found a solution to something I was struggling with, discovered a good solution to a channeling problem, or tried something new."/>

<Layout className="container gap-32">
    <section class="max-w-prose-l grid gap-8">
        <h1 class="text-4xl font-bold leading-snug">
            Blog
        </h1>
        <p class="text-lg text-neutral-400">
            A few notes and reminders for myself, usually when I've found a solution to something I was struggling with,
            discovered a good solution to a channeling problem, or tried something new.
            <br/><br/>
            It's just great to have a place to go back to.
        </p>

        <BlogFilter client:load availableTags={availableTags}/>
    </section>

    <BlogPosts client:only="react" blogPosts={blogPosts}>
        <section slot="fallback" class="grid gap-16">
            {postsGroupedByMonth.map(([title, posts]) => (
                    <div class="grid gap-8 sm:grid-cols-2 xl:grid-cols-2">
                        <p class="col-span-full text-2xl">
                            {title}
                        </p>
                        {posts && posts.map(({id, data: { title, createdAt, tags, description }}) => (
                                <a class="group col-span-1 flex h-full w-full flex-col justify-between gap-8 rounded-4xl bg-neutral-900 transition-colors hover:bg-neutral-800 p-12"
                                   href={`/blog/${id}`}
                                >
                                    <div class="flex flex-col items-start gap-6">
                                        <h2 class="text-lg">
                                            {title}
                                        </h2>
                                        <p class="text-neutral-200">
                                            {description}
                                        </p>
                                    </div>

                                    <hr class="border-neutral-800 transition-colors group-hover:border-neutral-700" />

                                    <div class="flex flex-wrap justify-between gap-4 text-neutral-400 text-xs">
                                        <p>{tags.map((tag) => `#${tag}`).join(", ")}</p>

                                        <div class="flex flex-wrap gap-4">
                                            <Skeleton className="w-[8ch]" />

                                            <p>{createdAt.toLocaleDateString("en-US")}</p>
                                        </div>
                                    </div>
                                </a>
                        ))}
                    </div>
            ))}
        </section>
    </BlogPosts>
</Layout>
